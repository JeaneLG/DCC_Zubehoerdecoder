 *   Version 0.1 - erstmal nur Servos
 *   Version 0.2 - alternativ auch ohne Programmierschalter nutzbar. PoM ist dann immer aktiv,
 *                  Addressen nur über den Sketch änderbar.
 *                  Adressierung als Board- oder Outputadressierung je nach CV29:6 (1=Outputaddr.)
 *                  Ansteuerung von Doppelspulenantrieben 
 *   Version 2.1   Einstellen der Servoendlagen per Drehencoder. Wegen der 2 Encodereingänge
 *                  können maximal 6 Weichen angesteuert werden.
 *                  Der Drehencoder bezieht sich immer auf die zuletzt gestellte Weiche.
 *   Version 3.0    Die Betriebsmodi und Startverhalten wird jetzt über die Analogeingänge A4/A5 eingestellt. Dazu 
 *                  müssen dort Pullups eingebaut werden. Jenachdem wieweit die Spannung  heruntergezogen wird werden
 *                  die Modi eingestellt:
 *                  A5:
 *                  5V (nur Pullup) normaler Betriebsmodus, kein PoM
 *                  3,3V (Spannungsteiler 1:2) PoM immer aktiv, Adresse immer aus defaults
 *                  1,6V (Spannungsteiler 2:1) IniMode: CV's werden immer auf init-Werte aus .h-Datei gesetzt
 *                  0V Programmiermodus / PoM ( 1. Empfamgenes Telegramm bestimmt Adresse )
 *                  A4:
 *                  wird A4 auf 0 gezogen , wird der aktuell vom Drehencoder beeinflusste Servo in die  
 *                  Mittellage gebracht. Sobald der Encoder wieder bewegt wird, bewegt sich das Servo wieder
 *                  zur vorhergehenden Position.
 *                  Ist A4 beim Programmstart auf 0, werden alle CV's auf die Defaults zurückgesetzt
 *                  Bei Nano- und Mini-Versionen kann dies auf A6/A7 umgestellt werden, um Ports freizumachen
 *                  (A6/7 sind beim UNO nicht vorhanden)
 *   Version 3.1    Wechselblinker mit Softleds, 
 *                  Zusammenfassung von Weichenadressen zur Ansteuerung von Lichtsignalen                
 *                  Weichensteuerung mit Servos und 2 Relais. Während der Bewegung sind beide Relais abgefallen
 *   Version 4.0    Bei Softled-Ausgägen für Lichtsgnale kann die 'ON'-Stellung der Ausgänge invertiert 
 *                  werden ( HIGH=OFF/LOW=ON ) (Bit 7 im Mode-CV des FSIGNAL2/3). Dazu werden die MobaTools ab
 *                  V0.9 benötigt
 *                  Lichtsignalbilder sind jetzt direkt den einzelnen Weichenbefehlen zugeordnet
 *                  Vorsignale am gleichen Mast können automtisch dunkelgeschaltet werden
 *   Version 4.0.3  Fehler im Zusammenhang mit NC-Pins beseitigt.
 *   Version 4.1.0  Debug Interface bei STM32 wird deaktiviert ( gibt zusätzliche IO's frei )
 *                  Neues Flag in iniFmode: bei FSERVO und FCOIL kann auch auf den Befehl reagiert werden,
 *                  wenn der Befehl mit dem aktuellen Status übereinstimmt. Bei FSERVO wird dann der Servoimpuls 
 *                  erneut ausgegeben, wenn AUTOOFF eingestellt ist.
 *                  Bei FCOIL kann der Ausgang auch über den DCC-Befehl abgeschaltet werden. Ist auch eine
 *                  Auto-Zeit angegeben, schaltet der Ausgang beim zuerst eintretenden Ereignis ab.
 *                  Verbesserte Drehencodererkennung
 *                  Fehler Justierung mit Drehencoder beseitigt
 *                  Fehler bei Vorsignaladressierung beseitigt
 *                  Betriebsmode auch über #define fest einstellbar
 *                  Reset auf Default-Einstellung per Factory-Reset ( DCC CV-Schreiben auf Adr 8 )
 *   Version 5.0.0  Umstellung der Software auf Klassen für die Funktionsobjekte. Für jede Funktion ( FSTATIC, FSERVO,
 *                  FCOIL, FSIGNAL ) wird ein Klasse angelegt. Klassenobjekte werden entsprechend der Konfiguration 
 '                  dynamisch im Setup instanziiert. Die Klassendefinitionen sind in eine eigene Datei 
 *                  ( Subdirectory 'src' ) ausgelagert.
 *                  Kleine Korrekturen und Ergänzungen im Manual und den Beschreibungen in Sketch und Konfig-Datei
 *                  Die Konfig-Datei ist vollständig kompatibel zur Vorversion ohne Klassen.
 *   Version 6.0.0  Der Zubehördecoder kann auch für ein LocoNet-Interface übersetzt werden. Interfacespezifische Programmteile
 *                  sind in interface.cpp zusammengefasst.
 *                   -  Die eigen Adresse wird selbst berechent, da die NMRA-DCCLib bis V1.4.2 bei Outputaddressing diese Adresse
 *                      für Adressen > 255 falsch berechnet
 *                   -  Anpassungen an NMRA-DCC Lib 2.0.0
 *                   (noch nicht realisiert:) -  Der Decoder arbeitet jetzt fest mit Output Addressing. 
 *                      CV29 kann nicht verändert werden, da es keine sinnvoll änderbaren Einstellungen mehr enthält.)
 *   Version 6.0.1  Fehlerbeseitigungen / Ergänzungen:
 *                  - in der Klasse Servo wurden im Konstruktor die Variablen nicht alle initiiert.
 *                  - Das DCC-Ack lässt sich im Konfig-File abschalten. Der in Interface.h definierte Ackpin 
 '                    lässt sich dann mit einer beliebigen Ausgangsfunktion nutzen.
 *                  Zu den Schaltbildern in der Doku wurden passende Konfig-Files in 'examples' erstellt.
 *
 *   Version 6.2.0  - Der Decoder unterstützt bei DCC nur noch den Output-Mode. CV29 ist nicht änderbar
 *                  - Für die Zubehörtelegramme wird der aktuelle CallBack der NmraDCC Lib verwendet.
 *                  - Bei FSTATIC lässt sich die RiseTime für das Blinken der LED in den Bits 4-7 des Statusbytes in
 *                    Schritten von 50ms ( 50...750ms) einstellen. Bei '0' gilt der voreingestellte Wert wie bisher (500ms).
 *                  - Der Datentyp für die Dcc-Adresse wurde auf 'int' vergrößert. Damit können Adressen bis zum DCC-Maximum 
 *                    vergeben werden.
 *
    Version 6.3.0  	- Neuer Funktionstyp FSERVO0 als Folgetyp für FSERVO. Damit können 2 Servos koordiniert gesteuert werden.
 *				      Den 4 möglichen DCC-Kommandos können die Zustände der 2 Servos beliebig zugeordnet werden.
				      Dies ist insbesondere für 2-bgriffige Formsignale notwendig.
                      Alternativ kann die Funktionaität genutzt werden, um ein Servo in 4 verschiedene Positonen zu steuern. 
                      Z.B. für mechanische Abdrücksignale oder bayerische Ruhe-Halt-Signale
                    - automatische Rückfallfunktion für Servos ( z.B. für Entkuppler )
					- Fehlerbereinigungen

    Version 7.0.0   - Die CV-Adressen wurden vollständig überarbeitet. Pro Adresse stehen nun 10 Parameter-CV's zur Verfügung.
                      Da in diesem Fall bereits bei Decodern mit mehr als 3 Adresse die CV's in einen reservierten Bereich
                      gelangen würden, wird der gesamte Bereich für die funktionsspezifischen CV's nach oben verlegt, und 
                      startet nun bei 120. Dieser Bereich ist nach NMRA herstellerspezifisch. 
                      S.a http://normen.railcommunity.de/RCN-225.pdf
                      Die globalen CV's unter 50 bleiben unverändert. Im Bereich ab 50 werden nun Informationen über die
                      genutzte Funktionalität hinterlegt ( Zahl der genutzten Adressen und jeweiliger iniTyp ). Diese CV's
                      können nicht verändert werden. Werden diese Parameter ( Zahl und Typ der Funktionen ) im Konfig-File
                      verändert, und entsprechen daher nicht mehr den ab 50 hinterlegten Werte, wird eine Grundinitierung 
                      aller CV's durchgeführt.
                      Neue Funktionen:
                      - 2 Servos können mit einer Adresse gesteuert werden, mit individuellen Endlagen und Geschwindigkeiten
                      - alternative Konfigfiles ( z.B. aus examples ) können einfacher eingebunden werden
                      - Bei Lichtsignalen sind Signalbilder mit blinkenden LED möglich
                      - Bei Lichtsignalen werden LEDs die im alten und neuen Signalbild aktiv sind, in der Überblendphase
                        nicht mehr dunkelgeschaltet ( konfigurierbar , Standard ist bisheriges Verhalten )
                      - parallel zum DCC/LocoNet Interface kann der Decoder auch über die serielle Schnittstelle gesteuert
                        werden ( über Parameter im Konfigfile aktivierbar ). Auch das Lesen und Ändern von CV's ist über
                        die serielle Schnittstelle möglich.
                      - Im examples-Verzeichnis ist ein Beispiel enthalten, wie die serielle Steuerung genutzt werden kann,
                        um mit einem 2. Arduino ein Taster-Stellpult zu realisiern.
                      - JMRI Decoderfiles können auch für die DCC-Schnittstelle generiert werden
                        
    Version 7.1.0   - Neue Funktion für FSTATIC und FCOIL:
						es kann ein 3. Ausgabe-Pin definiert werden. Dieser gibt den aktuellen DCC-Zustand der Adresse wieder
					- Neue Funktione FSTATIC3 ( FSTATIC extended Mode ):
						Mit dieser Funktion können bis zu 3 Pins angesteuert werden.
						Individuell für jeden Pin einstellbar:
						- Statisch oder Blinken
						- hart oder soft umschalten
						- invertiert
						- Blinkfrequenz
						Damit lassen sich z.B. auch 2 Ausgänge parallel schalten.
					- FCOIL:    bei gesetztem (neuen)Flag 'CSTATIC' werden die Ausgägne ausschließlich über DCC Befehle
					            gesteuert. Es können auch beide Ausgägne parallel aktiv sein.
					- FSIGNAL: 	Das Ignoriereren von Befehlen durch setzen des Bitmusters auf 255 funktioniert wieder.
					Bugfix: 2. Folgeadresse bei Vorsignalen berücksichtigt.
					Dokumentation erweitert und Fehler korrigiert.

     Version 7.1.1	- Fehler in der Standard DCC_Zubehoerdecoder.h beseitigt. Die erste Zeile für ein alternatives Konfig-File 
					  war nicht auskommentiert, so dass immer eine Konfig aus den Beispielen verwendet wurde.    

     Version 7.1.2	- Bei einem Servo mit 2 Relais waren nach Reset bis zum ersten Weichenbefehl beide Relais angezogen.
					  
